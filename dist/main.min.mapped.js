function f(r){return r&&{}.toString.call(r)==="[object Function]"}function h(r){return Array.isArray(r)}function c(r){return r==null}function n(r,...t){return e=>r(e,...t)}function st(r,t){return f(r.map)?r.map(t):Array.from(r).map(t)}function l(r,t){return arguments.length===1?n(st,r):st(r,t)}function xr(r,t,e){return c(e)?r.slice(t):r.slice(t,e)}function x(r,t,e){return arguments.length===1?n(xr,r):arguments.length===2?n(xr,r,t):xr(r,t,e)}function at(r,t,e,o){let i=r,u=o,_=t(i,u);for(;!_;){let{current:ar,next:lr}=e(u,i);u=ar,i=lr,_=t(i,u)}return u}function P(r,t,e,o){return arguments.length===3?n(at,r,t,e):at(r,t,e,o)}function d(r){return r.length<=0}function Ye(r,t){return P(t,e=>d(e),(e,o)=>{let i=e[0],u=x(e,1,null);if(f(i)){let _=i(o);return{next:u,current:_}}return i.exec(o,u)},r)}function Ve(r,t){return t.reduce((e,o)=>o(e),r)}function p(r,...t){return t.reduce((e,o)=>e&&f(o),!0)?Ve(r,t):Ye(r,t)}var dr=(r,t,e)=>f(r.reduce)?r.reduce(t,e):Array.from(r).reduce(t,e);function a(r,t,e){return arguments.length===1?n(dr,r,null):arguments.length===2?n(dr,r,t):dr(r,t,e)}function $(r){return a(r,(t,[e,o])=>(t[e]=o,t),{})}function lt(r,t){if(!c(t)&&r in t)return f(t[r])?t[r]():t[r]}function ve(r){return t=>lt(r,t)}function We(r){return t=>p(t,r,l(n(lt,t)),$)}function s(r){return h(r)?We(r):ve(r)}function gr(r,t,e){let o=s(t),i=arguments.length===2?u=>t in u:u=>o(u)===e;return a(r,(u,_)=>u&&i(_),!0)}function yr(r,t,e){return arguments.length===1?n(gr,r):arguments.length===2?n(gr,r,t):gr(r,t,e)}function hr(r){return a(r,(t,e)=>t&&e,!0)}function Nr(r,t,e){let o=s(t),i=arguments.length===2?u=>t in u:u=>o(u)===e;return a(r,(u,_)=>u||i(_),!1)}function _r(r,t,e){return arguments.length===1?n(Nr,r):arguments.length===2?n(Nr,r,t):Nr(r,t,e)}function k(r){return a(r,(t,e)=>t||e,!1)}function xt(r,t){return r.concat(t)}function C(r,t){return arguments.length===1?n(xt,r):xt(r,t)}function j(r){return typeof r=="string"}function dt(r,t){return j(r)?`${r}${t}`:h(r)?C(r,[t]):String(r)+t}function J(r,t){return arguments.length===1?n(dt,r):dt(r,t)}function gt(r,t,e){return t(r)&&e(r)}function yt(r){return r===!0}function b(r,t,e){return arguments.length===1?gt(r,yt,yt):arguments.length===2?n(gt,r,t):b(r,t,e)}function ht(r,t){return t===0?[r]:d(r)?[[]]:P(r,i=>d(i),(i,u)=>({next:x(u,t,void 0),current:C(i,[x(u,0,t)])}),[])}function Ir(r,t){return arguments.length===1?n(ht,r):ht(r,t)}var Nt=(r,t)=>f(r.filter)?r.filter(t):Array.from(r).filter(t);function y(r,t){return arguments.length===1?n(Nt,r):Nt(r,t)}function K(r){return r==null?!0:r.trim().length<=0}var{isArray:$e}=Array;function ke(r){return!!(c(r)||$e(r)&&d(r)||j(r)&&K(r))}var g=ke;function H(r){return!g(r)}var _t=y(H);function or(r,t,e,o){return t(r)?f(e)?e(r,!0):e:f(o)?o(r,!1):o}function It(r){return r}function E(r,t,e,o){return arguments.length===1?n(or,r,It,null):arguments.length===2?n(or,r,t,It):arguments.length===3?n(or,r,t,e):or(r,t,e,o)}function A(r,t){return{exec(e,o){return{next:r(o,e,t),current:e}}}}var At=A((r,t)=>(Error.stackTraceLimit=1/0,console.info(t),r));var Et=Object.entries;function Ot(r,t){return r===t}function I(r,t){return arguments.length===1?n(Ot,r):Ot(r,t)}function Ar(r,t=[]){return e=>e[r](...t)}var{keys:Je}=Object,F=Je;function Tt(r,t){return p(t,F,a((e,o)=>(e[o]=f(t[o])?t[o].bind(e):t[o],e),r))}function Er(r,t){return arguments.length===1?n(Tt,r):Tt(r,t)}var m=(...r)=>n(p,...r);function Or(r,t,e){if(arguments.length===2)return y(r,u=>t in u);let o=s(t),i=m(o,f(e)?e:I(e));return y(r,i)}function Tr(r,t,e){return arguments.length===1?n(Or,r):arguments.length===2?n(Or,r,t):Or(r,t,e)}function ir(r,t,e){if(!c(r))return t(r)?r:p(r,e,a((o,i)=>o||ir(i,t,e),null))}function L(r,t,e){return arguments.length===1?n(ir,r,s("children")):arguments.length===2?n(ir,r,t):ir(r,t,e)}function ur(r,t,e,o){let i=s(t);return L(r,u=>i(u)===e,o)}function Mr(r,t,e,o){return arguments.length===1?n(ur,r,!0,s("children")):arguments.length===2?n(ur,r,t,s("children")):arguments.length===3?n(ur,r,t):ur(r,t,e,o)}function Mt(r,t){return c(r)||d(r)?null:f(r.find)?r.find(t)||null:Array.from(r).find(t)||null}function w(r,t){return arguments.length===1?n(Mt,r):Mt(r,t)}function Sr(r,t,e){let o=s(t);return w(r,i=>o(i)===e)}function jr(r,t,e){return arguments.length===1?n(Sr,r):arguments.length===2?n(Sr,r,t):Sr(r,t,e)}var q=r=>d(r)?null:f(r.getItem)?r.getItem(0):f(r.objectAt)?r.objectAt(0):f(r.charAt)?r.charAt(0):r[0];function fr(r,t=1/0){return r.flat(t)}var St=l;function jt(r,t){let e=s(t);return a(r,(o,i)=>{let u=e(i);return o[u]===void 0&&(o[u]=[]),o[u].push(i),o},{})}function wr(r,t){return arguments.length===1?n(jt,r):jt(r,t)}function wt(r,t){return r>t}function U(r,t){return arguments.length===1?n(wt,r):wt(r,t)}function Bt(r,t){return r>=t}function Br(r,t){return arguments.length===1?n(Bt,r):Bt(r,t)}function Q(r){return()=>r}function Pt(r,t){if(g(r))return!1;if(f(r.includes))return r.includes(t);let e=w(r,I(t));return!c(e)}function Pr(r,t){return arguments.length===1?n(Pt,r):Pt(r,t)}function Cr(r,...t){return A((e,o)=>r(o,e,t)?[...t,...e]:e)}function qr(...r){return A(t=>[...r,...t])}function N(r){return h(r)||j(r)?r.length:r.size}function Ct(){let r=[...arguments],t=r.length-1,e=x(r,0,t);if(g(e)||N(e)===0)return null;let o=q(e);if(N(e)===1&&c(o))return null;let i=r[t];return new i(...e)}function Dr(){return arguments.length===0?null:arguments.length===1?(...r)=>Ct(...r,arguments[0]):Ct(...arguments)}function Rr(r){return typeof r=="number"&&!isNaN(r)}function B(r){return r&&typeof r=="object"}function br(r){return B(r)&&Object.keys(r).length===0}function X(r){return Boolean(r)&&typeof r.then=="function"}function qt(r,t){return Array.from(r).join(t)}function Fr(r,t){return arguments.length===1?n(qt,r):qt(r,t)}var Dt=Object.keys;var Rt=r=>{if(d(r))return null;let e=N(r)-1;return f(r.item)?r.item(e):f(r.getItem)?r.getItem(e):f(r.objectAt)?r.objectAt(e):f(r.charAt)?r.charAt(e):r[e]};var bt=A((r,t)=>(console.log(t),r));var Ft=!0;function Ke(...r){!Ft||console.log("[LOG]",`[${new Date().toISOString()}]`,...r)}function He(...r){!Ft||console.warn("[WARNING]",`[${new Date().toISOString()}]`,...r)}function Le(...r){console.error("[Error]",`[${new Date().toISOString()}]`,...r)}function Ue(...r){return console.info(...r),!1}var Gt={info:Ue,log:Ke,warn:He,error:Le};function Yt(r,t){return r<t}function Gr(r,t){return arguments.length===1?n(Yt,r):Yt(r,t)}function Vt(r,t){return r<=t}function Yr(r,t){return arguments.length===1?n(Vt,r):Vt(r,t)}function Z(r,t){return arguments.length===1?n(l,s(r)):l(r,s(t))}function vt(r,t){return r.match(t)}function z(r,t){return arguments.length===1?n(vt,r):vt(r,t)}var{assign:Qe}=Object;function Wt(r,t){return a(F(t),(e,o)=>{let i=t[o],u=r[o];return h(i)&&h(u)?r[o]=fr(i,u):B(i)&&B(u)?r[o]=Wt(Qe({},u),i):r[o]=i,e},r)}function $t(r,...t){return a(t,(e,o)=>c(o)?e:Wt(e,o),r)}function Vr(r,...t){return arguments.length===1?n($t,r):$t(r,...t)}function kt(r,t){return r!==t}function vr(r,t){return arguments.length===1?n(kt,r):kt(r,t)}function O(r){return!r}var Jt=JSON.parse;var Kt=Z;function Ht(r,t){return new Proxy(r,t)}function Wr(r,t){return arguments.length===1?n(Ht,r):Ht(r,t)}function $r(r,t){return Array(t-r).fill(r).map((e,o)=>e+o)}function kr(r,t){return arguments.length===0?$r(0,100):arguments.length===1?$r(0,r):$r(r,t)}function Lt(r,t){return y(r,m(t,O))}function G(r,t){return arguments.length===1?n(Lt,r):Lt(r,t)}function Jr(r,t,e){if(arguments.length===2)return G(r,u=>t in u);let o=s(t),i=m(o,f(e)?e:I(e));return G(r,i)}function Kr(r,t,e){return arguments.length===1?n(Jr,r):arguments.length===2?n(Jr,r,t):Jr(r,t,e)}function Ut(r,t,e){return r.replace(t,e)}function Hr(r,t,e){return arguments.length===2?n(Ut,r,t):Ut(r,t,e)}var Qt=()=>null;var Xt=Q;var mr=(r,t)=>r<t?1:r===t?0:-1;function Zt(r,t){return r.sort(t)}var Xe=(r,t=mr)=>!c(r)&&f(r)?n(Zt,r):Zt(r,t),D=Xe;function zt(r,t){if(g(r))return[];let e=N(r);return t>=e?r:x(D(r,D.RANDOM),0,t)}function Lr(r,t){return arguments.length===0?[]:arguments.length===1?n(zt,r):zt(r,t)}var{floor:Ze,random:ze}=Math;function Ur(r){return g(r)?null:Array.from(r)[Ze(ze()*N(r))]}function Qr(r){return new Promise(t=>{setTimeout(()=>{t()},r)})}var re=rn;function Xr(r,t,e=mr){let o=s(t);return p(r,D((i,u)=>e(o(i),o(u))))}function rn(r,t,e=mr){return arguments.length===1?n(Xr,r):arguments.length===2?n(Xr,r,t):Xr(r,t,e)}function te(r,t){return r.split(t)}function Zr(r,t){return arguments.length===1?n(te,r):te(r,t)}var ee=JSON.stringify;var tn=()=>{};function en(r){setTimeout(r,0)}function T(r){return t=>t[r]}function M(r){return(t,e)=>(t[r]=e,t)}function*ne(){let r=0;for(;;)yield++r}var nn=ne(),on=ne(),oe="mode",ie="task",ue="isRunning",fe="isCancelled",me="id",pe="context",ce="promise",se="generator",ae="operations",le="iterator",xe=T(oe),un=M(oe),zr=T(ie),fn=M(ie),mn=T(ue),Y=M(ue),de=T(fe),ge=M(fe),rr=T(me),ye=M(me),pn=T(pe),he=M(pe),V=T(ce),Ne=M(ce),cn=T(se),sn=M(se),tr=T(ae),rt=M(ae),an=T(le),ln=M(le),_e=m(it,O),xn=m(b(nr,_e)),tt=m(tr,y(nr)),pr=m(tt,q),Ie=m(tt,l(xn),k),cr=m(Ie,O),dn=m(mn,I(!0)),gn=m(de,I(!0)),yn=m(de,I(!0)),Ae=m(n(ge,!0),V),Ee=m(tr,l(Ae)),hn=m(nr,O),Nn=m(tr,y(hn),y(_e)),Oe=m(Nn,q),Te=m(Oe,c,O),et=m(Oe,E(c,tn,S)),_n=m(zr,n(Y,!1),et),In=m(n(Y,!1),_n),An=m(n(Y,!0),r=>Me(r).then(t=>(In(r),t))),v=class{constructor({generator:t,context:e,mode:o,idProvider:i}){ye(this,(i||nn).next().value),sn(this,t),he(this,e),rt(this,[]),un(this,o||"drop"),Y(this,!1)}cancel(){return sr(this)}run(...t){return S(this,...t)}perform(...t){return S(this,...t)}runNextOperation(){return et(this)}createOperation(...t){return ut(this,...t)}enqueueNewOperation(...t){return R(this,...t)}enqueueNextOperation(...t){return er(this,...t)}pushOperation(t){return nt(this,t)}removeOperation(t){return ot(this,t)}static id(t){return rr(t)}static getId(t){return rr(t)}static isRunning(t){return nr(t)}static hasNextOperation(t){return Te(t)}static getCurrentOperation(t){return pr(t)}static getRunningOperations(t){return tt(t)}static cancel(t){return sr(t)}static run(t,...e){return S(t,...e)}static perform(t,...e){return S(t,...e)}static runNextOperation(t){return et(t)}static createOperation(t,...e){return ut(t,...e)}static enqueueNewOperation(t,...e){return R(t,...e)}static enqueueNextOperation(t,...e){return er(t,...e)}static pushOperation(t,e){return nt(t,e)}static removeOperation(t,e){return ot(t,e)}},W=class{constructor({task:t,state:e,idProvider:o}){let i=cn(t),u=pn(t);Y(this,!1),ge(this,!1),he(this,u),fn(this,t),ye(this,(o||on).next().value),ln(this,i.call(u,...e)),Ne(this,Promise.resolve)}run(){return S(this)}cancel(){return sr(this)}perform(){return S(this)}static getId(t){return rr(t)}static getTask(t){return zr(t)}static isRunning(t){return nr(t)}static isCancelled(t){return it(t)}static getPromise(t){return V(t)}static run(t){return S(t)}static cancel(t){return sr(t)}static perform(t){return S(t)}};function sr(r){return r instanceof v?we(r):r instanceof W?Ae(r):!1}function S(r,...t){return r instanceof v?En(r,...t):r instanceof W?An(r,...t):!1}function En(r,...t){switch(xe(r)){case"drop":return Tn(r,...t);case"restart":return On(r,...t);case"keepLatest":return Mn(r,...t);case"enqueue":return Sn(r,...t);default:return jn(r,...t)}}function On(r,...t){return cr(r)?R(r,...t):(Ee(r),R(r,...t))}function Tn(r,...t){return cr(r)?R(r,...t):p(r,pr,V)}function Mn(r,...t){return cr(r)?R(r,...t):(p(r,Te,O)&&er(r,...t),p(r,pr,V))}function Sn(r,...t){return cr(r)?R(r,...t):(er(r,...t),p(r,pr,V))}function jn(r){throw new Error(`Cannot perform task in mode: ${xe(r)}`)}function R(r,...t){return Y(r,!0),p(er(r,...t),S)}function er(r,...t){return p(ut(r,...t),e=>nt(r,e))}function nt(r,t){return rt(r,[...tr(r),t]),t}function ot(r,t){let e=p(t,rr),o=p(r,tr),i=p(o,y(u=>rr(u)!==e));rt(r,i)}function Me(r,t){let e=zr(r),o=an(r);if(it(r))return wn(e,r,t);let i=o.next(t),{done:u,value:_}=i;return u?Bn(e,r,_):Se(e,r,new Promise((ar,lr)=>{en(async()=>{let Ge=X(_)?await _:_;Me(r,Ge).then(ar,lr)})}))}function Se(r,t,e){return p(t,n(Ne,e),V)}function je(r,t,e){ot(r,t);let o=new Promise(i=>{i(e)});return Se(r,t,o)}function wn(r,t,e){return je(r,t,e)}function Bn(r,t,e){return je(r,t,e)}function we(r){return Promise.all(Ee(r))}function nr(r){return r instanceof v?Ie(r):r instanceof W?dn(r):!1}function it(r){return r instanceof v?gn(r):r instanceof W?yn(r):!1}function ut(r,...t){return new W({task:r,state:t})}function Pn({generator:r,context:t,mode:e}){return new v({generator:r,context:t,mode:e})}function Be(r,t,e){return Pn({generator:r,context:t,mode:e})}function Pe(r){return we(r)}function Ce(r,t){return t.test(r)}function ft(r,t){return arguments.lentesth===1?n(Ce,r):Ce(r,t)}function mt(r){return r.trim()}var Cn=m(({string:r,maxLength:t})=>{let e=p(r,x(0,t),z(/( )\b(\w+)$/u));return E(e,c,()=>x(r,0,t-1),()=>x(r,0,e.index))},J("\u2026"));function qe(r,t){return g(r)?"":p(N(r||""),E(U(t),Cn({string:r,maxLength:t}),r))}function pt(r,t){return arguments.length===1?n(qe,r):qe(r,t)}function De(r){return r}function Re(r,t=De){return g(r)?[]:l([...new Set(l(r,t))],e=>w(r,o=>t(o)===e))}function ct(r,t=De){return arguments.length===1&&f(r)?n(Re,r):Re(r,t)}var be=Object.values;var Fe=E(h,r=>r,r=>[r]);var Tc={allWith:yr,all:hr,anyWith:_r,any:k,append:J,both:b,chunk:Ir,compact:_t,concat:C,conditional:E,createTask:Be,cancelTask:Pe,curry:n,debug:At,entries:Et,eq:I,exec:Ar,extend:Er,filterBy:Tr,filter:y,findByInTree:Mr,findBy:jr,findInTree:L,find:w,first:q,flatten:fr,forEach:St,groupBy:wr,gt:U,gte:Br,id:Q,includes:Pr,injectPipelineIf:Cr,injectPipeline:qr,instantiate:Dr,isArrayEmpty:d,isArray:h,isEmpty:g,isFunction:f,isNone:c,isNumber:Rr,isObject:B,isObjectEmpty:br,isPromise:X,isStringEmpty:K,isString:j,join:Fr,keyMap:s,keys:Dt,last:Rt,length:N,log:bt,logger:Gt,lt:Gr,lte:Yr,mapBy:Z,map:l,match:z,merge:Vr,neq:vr,notEmpty:H,not:O,ownProperties:F,parse:Jt,pipe:p,pipelineTransformation:A,pipeline:m,pluck:Kt,proxy:Wr,range:kr,recursive:P,reduce:a,rejectBy:Kr,reject:G,replace:Hr,returnNull:Qt,returnValue:Xt,sampleMany:Lr,sample:Ur,sleep:Qr,slice:x,sortBy:re,sort:D,split:Zr,stringify:ee,test:ft,toObject:$,trim:mt,truncate:pt,uniq:ct,values:be,wrapWithArray:Fe};export{hr as all,yr as allWith,k as any,_r as anyWith,J as append,b as both,Pe as cancelTask,Ir as chunk,_t as compact,C as concat,E as conditional,Be as createTask,n as curry,At as debug,Tc as default,Et as entries,I as eq,Ar as exec,Er as extend,y as filter,Tr as filterBy,w as find,jr as findBy,Mr as findByInTree,L as findInTree,q as first,fr as flatten,St as forEach,wr as groupBy,U as gt,Br as gte,Q as id,Pr as includes,qr as injectPipeline,Cr as injectPipelineIf,Dr as instantiate,h as isArray,d as isArrayEmpty,g as isEmpty,f as isFunction,c as isNone,Rr as isNumber,B as isObject,br as isObjectEmpty,X as isPromise,j as isString,K as isStringEmpty,Fr as join,s as keyMap,Dt as keys,Rt as last,N as length,bt as log,Gt as logger,Gr as lt,Yr as lte,l as map,Z as mapBy,z as match,Vr as merge,vr as neq,O as not,H as notEmpty,F as ownProperties,Jt as parse,p as pipe,m as pipeline,A as pipelineTransformation,Kt as pluck,Wr as proxy,kr as range,P as recursive,a as reduce,G as reject,Kr as rejectBy,Hr as replace,Qt as returnNull,Xt as returnValue,Ur as sample,Lr as sampleMany,Qr as sleep,x as slice,D as sort,re as sortBy,Zr as split,ee as stringify,ft as test,$ as toObject,mt as trim,pt as truncate,ct as uniq,be as values,Fe as wrapWithArray};
//# sourceMappingURL=data:application/json;base64,
